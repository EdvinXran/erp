<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cskaoyan.mapper.EmployeeMapper">
  <resultMap id="BaseResultMap" type="com.cskaoyan.bean.Employee">
    <id column="emp_id" jdbcType="VARCHAR" property="empId" />
    <result column="emp_name" jdbcType="VARCHAR" property="empName" />
    <result column="sex" jdbcType="CHAR" property="sex" />
    <result column="id_code" jdbcType="VARCHAR" property="idCode" />
    <result column="birthday" jdbcType="DATE" property="birthday" />
    <result column="join_date" jdbcType="DATE" property="joinDate" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="education" jdbcType="VARCHAR" property="education" />
    <result column="degree" jdbcType="VARCHAR" property="degree" />
    <result column="major" jdbcType="VARCHAR" property="major" />
    <result column="graduate_school" jdbcType="VARCHAR" property="graduateSchool" />
    <result column="education_form" jdbcType="VARCHAR" property="educationForm" />
    <result column="department_id" jdbcType="VARCHAR" property="departmentId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    emp_id, emp_name, sex, id_code, birthday, join_date, status, education, degree, major,
    graduate_school, education_form, department_id
  </sql>
  <select id="selectByExample" parameterType="com.cskaoyan.bean.EmployeeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from employee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from employee
    where emp_id = #{empId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from employee
    where emp_id = #{empId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.cskaoyan.bean.EmployeeExample">
    delete from employee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="employee">
    insert into employee (emp_id, emp_name, sex,
      id_code, birthday, join_date,
      status, education, degree,
      major, graduate_school, education_form,
      department_id)
    values (#{empId}, #{empName}, #{sex},
      #{idCode}, #{birthday}, #{joinDate},
      #{status}, #{education}, #{degree},
      #{major}, #{graduateSchool}, #{educationForm},
      #{departmentId})
  </insert>
  <insert id="insertSelective" parameterType="com.cskaoyan.bean.Employee">
    insert into employee
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="empId != null">
        emp_id,
      </if>
      <if test="empName != null">
        emp_name,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="idCode != null">
        id_code,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="joinDate != null">
        join_date,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="education != null">
        education,
      </if>
      <if test="degree != null">
        degree,
      </if>
      <if test="major != null">
        major,
      </if>
      <if test="graduateSchool != null">
        graduate_school,
      </if>
      <if test="educationForm != null">
        education_form,
      </if>
      <if test="departmentId != null">
        department_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="empId != null">
        #{empId,jdbcType=VARCHAR},
      </if>
      <if test="empName != null">
        #{empName,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=CHAR},
      </if>
      <if test="idCode != null">
        #{idCode,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=DATE},
      </if>
      <if test="joinDate != null">
        #{joinDate,jdbcType=DATE},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="education != null">
        #{education,jdbcType=VARCHAR},
      </if>
      <if test="degree != null">
        #{degree,jdbcType=VARCHAR},
      </if>
      <if test="major != null">
        #{major,jdbcType=VARCHAR},
      </if>
      <if test="graduateSchool != null">
        #{graduateSchool,jdbcType=VARCHAR},
      </if>
      <if test="educationForm != null">
        #{educationForm,jdbcType=VARCHAR},
      </if>
      <if test="departmentId != null">
        #{departmentId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.cskaoyan.bean.EmployeeExample" resultType="java.lang.Long">
    select count(*) from employee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update employee
    <set>
      <if test="record.empId != null">
        emp_id = #{record.empId,jdbcType=VARCHAR},
      </if>
      <if test="record.empName != null">
        emp_name = #{record.empName,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=CHAR},
      </if>
      <if test="record.idCode != null">
        id_code = #{record.idCode,jdbcType=VARCHAR},
      </if>
      <if test="record.birthday != null">
        birthday = #{record.birthday,jdbcType=DATE},
      </if>
      <if test="record.joinDate != null">
        join_date = #{record.joinDate,jdbcType=DATE},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.education != null">
        education = #{record.education,jdbcType=VARCHAR},
      </if>
      <if test="record.degree != null">
        degree = #{record.degree,jdbcType=VARCHAR},
      </if>
      <if test="record.major != null">
        major = #{record.major,jdbcType=VARCHAR},
      </if>
      <if test="record.graduateSchool != null">
        graduate_school = #{record.graduateSchool,jdbcType=VARCHAR},
      </if>
      <if test="record.educationForm != null">
        education_form = #{record.educationForm,jdbcType=VARCHAR},
      </if>
      <if test="record.departmentId != null">
        department_id = #{record.departmentId,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update employee
    set emp_id = #{record.empId,jdbcType=VARCHAR},
    emp_name = #{record.empName,jdbcType=VARCHAR},
    sex = #{record.sex,jdbcType=CHAR},
    id_code = #{record.idCode,jdbcType=VARCHAR},
    birthday = #{record.birthday,jdbcType=DATE},
    join_date = #{record.joinDate,jdbcType=DATE},
    status = #{record.status,jdbcType=VARCHAR},
    education = #{record.education,jdbcType=VARCHAR},
    degree = #{record.degree,jdbcType=VARCHAR},
    major = #{record.major,jdbcType=VARCHAR},
    graduate_school = #{record.graduateSchool,jdbcType=VARCHAR},
    education_form = #{record.educationForm,jdbcType=VARCHAR},
    department_id = #{record.departmentId,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.cskaoyan.bean.Employee">
    update employee
    <set>
      <if test="empName != null">
        emp_name = #{empName,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=CHAR},
      </if>
      <if test="idCode != null">
        id_code = #{idCode,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=DATE},
      </if>
      <if test="joinDate != null">
        join_date = #{joinDate,jdbcType=DATE},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="education != null">
        education = #{education,jdbcType=VARCHAR},
      </if>
      <if test="degree != null">
        degree = #{degree,jdbcType=VARCHAR},
      </if>
      <if test="major != null">
        major = #{major,jdbcType=VARCHAR},
      </if>
      <if test="graduateSchool != null">
        graduate_school = #{graduateSchool,jdbcType=VARCHAR},
      </if>
      <if test="educationForm != null">
        education_form = #{educationForm,jdbcType=VARCHAR},
      </if>
      <if test="departmentId != null">
        department_id = #{departmentId,jdbcType=VARCHAR},
      </if>
    </set>
    where emp_id = #{empId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cskaoyan.bean.Employee">
    update employee
    set emp_name = #{empName,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=CHAR},
      id_code = #{idCode,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=DATE},
      join_date = #{joinDate,jdbcType=DATE},
      status = #{status,jdbcType=VARCHAR},
      education = #{education,jdbcType=VARCHAR},
      degree = #{degree,jdbcType=VARCHAR},
      major = #{major,jdbcType=VARCHAR},
      graduate_school = #{graduateSchool,jdbcType=VARCHAR},
      education_form = #{educationForm,jdbcType=VARCHAR},
      department_id = #{departmentId,jdbcType=VARCHAR}
    where emp_id = #{empId,jdbcType=VARCHAR}
  </update>
  <resultMap id="employeeMap" type="employee">
    <result property="empId" column="emp_id"/>
    <result property="empName" column="emp_name"/>
    <result property="sex" column="sex"/>
    <result property="idCode" column="id_code"/>
    <result property="birthday" column="birthday"/>
    <result property="joinDate" column="join_date"/>
    <result property="status" column="status"/>
    <result property="education" column="education"/>
    <result property="degree" column="degree"/>
    <result property="major" column="major"/>
    <result property="graduateSchool" column="graduate_school"/>
    <result property="educationForm" column="education_form"/>
    <association property="department" javaType="department">
      <result property="departmentId" column="department_id"/>
      <result property="departmentName" column="department_name"/>
      <result property="note" column="note"/>
    </association>
  </resultMap>
  <select id="selectAllEmployee" resultMap="employeeMap">
    select
    emp.emp_id,
    emp.emp_name,
    emp.sex,
    emp.id_code,
    emp.join_date,
    emp.birthday,
    emp.join_date,
    emp.status,
    emp.education,
    emp.degree,
    emp.major,
    emp.graduate_school,
    emp.education_form,
    dep.department_name,
    dep.department_id,
    dep.note
    from  employee emp
    left join department dep on emp.department_id= dep.department_id;
  </select>
  <insert id="insertemployee" parameterType="employee">
    insert into employee (emp_id, emp_name, sex,
      id_code, birthday, join_date,
      status, education, degree,
      major, graduate_school, education_form,
      department_id)
    values (#{param1.empId}, #{param1.empName}, #{param1.sex},#{param1.idCode}, #{param1.birthday}, #{param1.joinDate}
    ,#{param1.status}, #{param1.education}, #{param1.degree},
      #{param1.major}, #{param1.graduateSchool}, #{param1.educationForm},#{param2})
  </insert>
  <update id="updateEmployeeById" parameterType="employee">
    update employee
    set emp_name = #{emp.empName},
      sex = #{emp.sex},
      id_code = #{emp.idCode},
      birthday = #{emp.birthday},
      join_date = #{emp.joinDate} ,
      status = #{emp.status},
      education = #{emp.education},
      degree = #{emp.degree},
      major = #{emp.major},
      graduate_school = #{emp.graduateSchool},
      education_form = #{emp.educationForm},
      department_id = #{Did}
    where emp_id = #{emp.empId}
  </update>
  <delete id="deletedEmployeeByIds" parameterType="string">
    delete from employee
     <where>
       <foreach collection="ids" open="(" close=")" separator="," item="id">
         emp_id = #{id}
       </foreach>
     </where>
  </delete>
</mapper>